#!/usr/bin/env node

// Test script to investigate the logout session invalidation issue
async function testLogoutIssue() {
  console.log('üîç Testing Logout Session Invalidation Issue\n');
  
  // Test protected route access immediately after logout
  const testRoutes = [
    '/',
    '/publicar',
    '/redes',
    '/analytics'
  ];
  
  console.log('üß™ Simulating Post-Logout Navigation Test:\n');
  
  for (const route of testRoutes) {
    console.log(`üîç Testing route: ${route}`);
    
    try {
      // Simulate request with mixed cookie state (some cleared, some not)
      const response = await fetch(`https://socialhub.gestorlead.com.br${route}`, {
        method: 'GET',
        redirect: 'manual',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          // Simulate partial cookie state after client-side logout
          'Cookie': 'sh-login-success=; sh-login-timestamp=;'
        }
      });
      
      if (response.status === 307 || response.status === 302) {
        const location = response.headers.get('location');
        if (location && location.includes('/login')) {
          console.log(`   ‚úÖ CORRETO - Redireciona para login ap√≥s logout`);
        } else {
          console.log(`   ‚ö†Ô∏è SUSPEITO - Redireciona para: ${location}`);
        }
      } else if (response.status === 200) {
        console.log(`   ‚ùå FALHA CR√çTICA - Rota acess√≠vel ap√≥s logout (Status 200)`);
      } else {
        console.log(`   üîç Status inesperado: ${response.status}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüìã Cen√°rio do Problema Reportado:');
  console.log('1. Usu√°rio faz login ‚Üí Sucesso');
  console.log('2. Usu√°rio navega pelo sistema ‚Üí Sucesso');
  console.log('3. Usu√°rio clica em "Logout" ‚Üí Nome desaparece do menu');
  console.log('4. Usu√°rio tenta navegar para rota protegida ‚Üí AINDA FUNCIONA');
  console.log('5. Isso indica que o logout n√£o invalida a sess√£o no middleware');
  
  console.log('\nüîß Poss√≠veis Causas:');
  console.log('‚Ä¢ signOut() n√£o limpa todos os cookies necess√°rios');
  console.log('‚Ä¢ Middleware ainda encontra cookies de sess√£o v√°lidos');
  console.log('‚Ä¢ Falta de sincroniza√ß√£o entre cliente e servidor ap√≥s logout');
  console.log('‚Ä¢ Cookies do Supabase n√£o sendo limpos corretamente');
  
  console.log('\nüí° Solu√ß√µes a Testar:');
  console.log('1. Melhorar a fun√ß√£o signOut para limpar TODOS os cookies');
  console.log('2. Adicionar invalida√ß√£o server-side da sess√£o');
  console.log('3. For√ßar refresh completo da p√°gina ap√≥s logout');
  console.log('4. Implementar endpoint de logout que limpe cookies server-side');
}

async function inspectMiddlewareLogic() {
  console.log('\nüî¨ An√°lise da L√≥gica do Middleware:\n');
  
  console.log('Condi√ß√µes para isAuthenticated no middleware:');
  console.log('1. hasValidSession: session v√°lida do Supabase');
  console.log('2. hasLoginSuccess + isRecentLogin: cookies de login + timestamp recente');
  console.log('');
  
  console.log('‚ùå PROBLEMA IDENTIFICADO:');
  console.log('Durante o logout:');
  console.log('‚Ä¢ Cliente chama signOut() ‚Üí limpa estado local');
  console.log('‚Ä¢ Supabase.auth.signOut() ‚Üí deveria limpar cookies');
  console.log('‚Ä¢ MAS: cookies podem persistir ou n√£o ser completamente limpos');
  console.log('‚Ä¢ Middleware ainda v√™ cookies ‚Üí permite acesso');
  console.log('');
  
  console.log('üìù Estado Esperado vs Real:');
  console.log('ESPERADO ap√≥s logout:');
  console.log('  ‚Ä¢ hasValidSession: false');
  console.log('  ‚Ä¢ hasLoginSuccess: false (cookie limpo)');
  console.log('  ‚Ä¢ hasAuthCookies: false (todos limpos)');
  console.log('');
  console.log('REAL ap√≥s logout (problema):');
  console.log('  ‚Ä¢ hasValidSession: talvez false');
  console.log('  ‚Ä¢ hasLoginSuccess: talvez false');
  console.log('  ‚Ä¢ hasAuthCookies: TRUE (cookies persistem!)');
  console.log('  ‚Ä¢ isAuthenticated: TRUE ‚Üí problema!');
}

// Teste de cookies espec√≠fico
async function testCookieLogic() {
  console.log('\nüç™ Teste da L√≥gica de Cookies:\n');
  
  console.log('Middleware verifica estes padr√µes de cookies:');
  const patterns = [
    'sb-[hostname]-auth-token',
    'sb-127.0.0.1-auth-token',
    'sb-localhost-auth-token', 
    'supabase-auth-token',
    'sh-login-success',
    'sh-login-timestamp'
  ];
  
  patterns.forEach(pattern => {
    console.log(`  ‚Ä¢ ${pattern}`);
  });
  
  console.log('\n‚ùå FALHA: signOut() pode n√£o limpar TODOS estes padr√µes');
  console.log('‚úÖ SOLU√á√ÉO: Logout deve limpar explicitamente cada padr√£o');
}

async function main() {
  await testLogoutIssue();
  await inspectMiddlewareLogic();
  await testCookieLogic();
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Melhorar fun√ß√£o signOut para limpar todos os cookies');
  console.log('2. Adicionar endpoint /api/auth/logout server-side');
  console.log('3. Fazer logout invalidar sess√£o tanto no cliente quanto no servidor');
  console.log('4. Testar com for√ßa total de limpeza de cookies');
}

main().catch(console.error);