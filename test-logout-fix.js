#!/usr/bin/env node

// Comprehensive test for the logout fix
async function testLogoutFix() {
  console.log('üß™ Testing Logout Fix - Social Hub\n');
  
  console.log('üîß Changes Made:');
  console.log('1. ‚úÖ Enhanced signOut() function to clear ALL auth cookies');
  console.log('2. ‚úÖ Created server-side /api/auth/logout endpoint');
  console.log('3. ‚úÖ Updated sidebar to use dual logout (client + server)');
  console.log('4. ‚úÖ Comprehensive cookie clearing with multiple domain/path combinations');
  console.log('');
  
  // Test the new logout endpoint
  console.log('üîç Testing Server-Side Logout Endpoint:\n');
  
  try {
    const response = await fetch('https://socialhub.gestorlead.com.br/api/auth/logout', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
    
    console.log(`Server logout endpoint status: ${response.status}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Server logout endpoint working');
      console.log(`   Response: ${data.message}`);
      console.log(`   Timestamp: ${data.timestamp}`);
    } else {
      console.log('‚ö†Ô∏è Server logout endpoint returned non-200 status');
    }
  } catch (error) {
    console.log(`‚ùå Error testing logout endpoint: ${error.message}`);
  }
  
  // Test protected routes for unauthenticated access
  console.log('\nüõ°Ô∏è Testing Route Protection After Logout:\n');
  
  const protectedRoutes = [
    '/',
    '/publicar', 
    '/redes',
    '/analytics',
    '/admin',
    '/integracoes'
  ];
  
  for (const route of protectedRoutes) {
    console.log(`üîç Testing: ${route}`);
    
    try {
      const response = await fetch(`https://socialhub.gestorlead.com.br${route}`, {
        method: 'GET',
        redirect: 'manual',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Cookie': '' // No cookies to simulate post-logout state
        }
      });
      
      if (response.status === 307 || response.status === 302) {
        const location = response.headers.get('location');
        if (location && location.includes('/login')) {
          console.log(`   ‚úÖ PROTEGIDO - Redireciona para login`);
        } else {
          console.log(`   ‚ö†Ô∏è REDIRECIONA - Para: ${location}`);
        }
      } else if (response.status === 200) {
        console.log(`   ‚ùå FALHA - Rota acess√≠vel sem autentica√ß√£o`);
      } else {
        console.log(`   üîç Status: ${response.status}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüìã Resumo da Corre√ß√£o:');
  console.log('');
  console.log('ANTES (Problema):');
  console.log('‚Ä¢ Logout apenas limpava estado local');
  console.log('‚Ä¢ Cookies do Supabase persistiam');
  console.log('‚Ä¢ Middleware ainda encontrava cookies v√°lidos');
  console.log('‚Ä¢ Usu√°rio podia navegar ap√≥s logout');
  console.log('');
  console.log('DEPOIS (Corre√ß√£o):');
  console.log('‚Ä¢ Logout limpa TODOS os cookies explicitamente');
  console.log('‚Ä¢ Endpoint server-side garante invalida√ß√£o completa');
  console.log('‚Ä¢ M√∫ltiplas varia√ß√µes de dom√≠nio/path s√£o limpas');
  console.log('‚Ä¢ Middleware n√£o encontra mais cookies v√°lidos');
  console.log('‚Ä¢ Rotas protegidas redirecionam para login');
}

// Test specific cookie patterns
async function testCookiePatterns() {
  console.log('\nüç™ Testando Padr√µes de Cookies Limpos:\n');
  
  const patterns = [
    'sb-localhost-auth-token',
    'sb-127.0.0.1-auth-token',
    'sb-socialhub.gestorlead.com.br-auth-token',
    'supabase-auth-token', 
    'sh-login-success',
    'sh-login-timestamp'
  ];
  
  console.log('Padr√µes de cookies que agora s√£o limpos:');
  patterns.forEach((pattern, index) => {
    console.log(`   ${index + 1}. ${pattern}`);
  });
  
  console.log('\nM√©todos de limpeza aplicados:');
  console.log('‚Ä¢ document.cookie com expires passada');
  console.log('‚Ä¢ M√∫ltiplas combina√ß√µes de domain/path');
  console.log('‚Ä¢ Limpeza server-side via Set-Cookie headers');
  console.log('‚Ä¢ Varredura de cookies existentes com palavras-chave');
}

// Instructions for manual testing
function showManualTestInstructions() {
  console.log('\nüìù Instru√ß√µes para Teste Manual:\n');
  
  console.log('1. üîë FAZER LOGIN:');
  console.log('   ‚Ä¢ Acesse: https://socialhub.gestorlead.com.br/login');
  console.log('   ‚Ä¢ Fa√ßa login normalmente');
  console.log('   ‚Ä¢ Verifique que o nome aparece no menu lateral');
  console.log('');
  
  console.log('2. üß™ TESTAR NAVEGA√á√ÉO LOGADO:');
  console.log('   ‚Ä¢ Navegue para /publicar, /redes, etc.');
  console.log('   ‚Ä¢ Confirme que todas as rotas funcionam');
  console.log('');
  
  console.log('3. üö™ FAZER LOGOUT:');
  console.log('   ‚Ä¢ Clique no bot√£o "Sign out" no menu lateral');
  console.log('   ‚Ä¢ Verifique no console do navegador (F12):');
  console.log('     - "Client-side logout completed"');
  console.log('     - "Server-side logout completed"');
  console.log('     - "Full logout process completed"');
  console.log('   ‚Ä¢ Confirme redirecionamento para /login');
  console.log('');
  
  console.log('4. üõ°Ô∏è TESTAR PROTE√á√ÉO P√ìS-LOGOUT:');
  console.log('   ‚Ä¢ Tente navegar para: /publicar');
  console.log('   ‚Ä¢ Tente navegar para: /redes');
  console.log('   ‚Ä¢ Tente navegar para: /');
  console.log('   ‚Ä¢ TODAS devem redirecionar para login');
  console.log('');
  
  console.log('5. ‚úÖ CRIT√âRIO DE SUCESSO:');
  console.log('   ‚Ä¢ Nome some do menu ap√≥s logout');
  console.log('   ‚Ä¢ Todas as rotas redirecionam para login');
  console.log('   ‚Ä¢ N√£o √© poss√≠vel acessar conte√∫do protegido');
  console.log('   ‚Ä¢ Console mostra logs de limpeza completa');
}

async function main() {
  await testLogoutFix();
  await testCookiePatterns();
  showManualTestInstructions();
  
  console.log('\nüéØ RESULTADO ESPERADO:');
  console.log('‚úÖ Logout agora invalida completamente a sess√£o');
  console.log('‚úÖ Usu√°rios n√£o conseguem mais navegar ap√≥s logout');
  console.log('‚úÖ Todas as rotas protegidas redirecionam para login');
  console.log('‚úÖ Problema de seguran√ßa RESOLVIDO');
}

main().catch(console.error);